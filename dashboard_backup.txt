import { useEffect, useMemo, useState, lazy, Suspense } from "react";
import { useQuery } from "@tanstack/react-query";
import { Link } from "wouter";
import { useAuth } from "@/context/AuthContext";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import {
  Heart,
  Activity,
  Calendar,
  MessageSquare,
  AlertTriangle,
  CheckCircle,
  Thermometer,
  Newspaper,
  ExternalLink,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell
} from "recharts";
import HealthDataCard from "@/components/HealthDataCard";
import HealthTipsSidebar from "@/components/HealthTipsSidebar";
import PreventCalculator from "@/components/PreventCalculator";

export default function Dashboard() {
  const { user } = useAuth();
  
  // Fetch conversations
  const { data: conversations = [], isLoading: conversationsLoading } = useQuery<any[]>({ 
    queryKey: ['/api/conversations'],
  });
  
  // Fetch predictions
  const { data: predictions = [], isLoading: predictionsLoading } = useQuery<any[]>({ 
    queryKey: ['/api/predictions'],
  });
  
  // Fetch health metrics
  const { data: healthMetrics = [], isLoading: metricsLoading } = useQuery<any[]>({ 
    queryKey: ['/api/health-metrics'],
  });
  
  const isDoctor = user?.role === "doctor";
  
  // Sample data for charts
  const heartRateData = useMemo(() => {
    if (!healthMetrics || healthMetrics.length === 0) return [];
    
    return healthMetrics
      .filter((metric: any) => metric.metricType === 'heart_rate')
      .map((metric: any) => ({
        date: new Date(metric.recordedAt).toLocaleDateString(),
        value: parseInt(metric.value),
      }))
      .slice(0, 7);
  }, [healthMetrics]);
  
  const cholesterolData = useMemo(() => {
    if (!healthMetrics || healthMetrics.length === 0) return [];
    
    return healthMetrics
      .filter((metric: any) => metric.metricType === 'cholesterol')
      .map((metric: any) => ({
        date: new Date(metric.recordedAt).toLocaleDateString(),
        value: parseInt(metric.value),
      }))
      .slice(0, 7);
  }, [healthMetrics]);
  
  const predictionResults = useMemo(() => {
    if (!predictions || predictions.length === 0) return [];
    
    const positive = predictions.filter((p: any) => p.result).length;
    const negative = predictions.length - positive;
    
    return [
      { name: 'Positive', value: positive, color: '#ef4444' },
      { name: 'Negative', value: negative, color: '#22c55e' },
    ];
  }, [predictions]);
  
  // Detect user condition for contextual tips
  const userCondition = useMemo(() => {
    if (!predictions || predictions.length === 0) return undefined;
    
    // Check if user has a positive heart disease prediction
    const hasHeartDisease = predictions.some((p: any) => p.result === true);
    if (hasHeartDisease) return "heart disease";
    
    // Can extend with other conditions as needed
    return undefined;
  }, [predictions]);
  
  // Loading state
  if (conversationsLoading || predictionsLoading || metricsLoading) {
    return (
      <div className="container mx-auto py-6 px-4">
        <h1 className="text-2xl font-bold mb-6">Dashboard</h1>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {[1, 2, 3, 4, 5, 6].map((i) => (
            <Card key={i} className="animate-pulse">
              <CardHeader className="pb-2">
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
                <div className="h-6 bg-gray-200 rounded w-2/3 mt-2"></div>
              </CardHeader>
              <CardContent>
                <div className="h-24 bg-gray-200 rounded"></div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }
  
  return (
    <div className="flex">
      {/* Health Tips Sidebar */}
      {!isDoctor && <HealthTipsSidebar userCondition={userCondition} />}
      
      <div className="flex-1 container py-6 px-4">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">Dashboard</h1>
          <div className="flex space-x-4">
            <Link href="/disease-predictor">
              <Button className="flex items-center">
                <Activity className="mr-2 h-4 w-4" />
                Disease Predictor
              </Button>
            </Link>
            {isDoctor && (
              <>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button className="flex items-center" variant="outline">
                      <Heart className="mr-2 h-4 w-4" />
                      AHA PREVENT Calculator
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="max-w-4xl max-h-[85vh] overflow-y-auto">
                    <Suspense fallback={<div className="p-8 text-center">Loading calculator...</div>}>
                      <div className="py-2">
                        <PreventCalculator />
                      </div>
                    </Suspense>
                  </DialogContent>
                </Dialog>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button className="flex items-center" variant="outline">
                      <Newspaper className="mr-2 h-4 w-4" />
                      Health News
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto">
                  <DialogHeader>
                    <DialogTitle className="text-2xl font-bold text-red-700">Heart Health News</DialogTitle>
                    <DialogDescription>
                      Latest research and innovations in cardiovascular health
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-6 py-4">
                    {/* First article */}
                    <div className="p-4 border rounded-lg">
                      <h3 className="text-xl font-bold mb-2">A new tool to predict heart disease risk</h3>
                      <p className="text-sm text-muted-foreground mb-1">March 1, 2024 | Harvard Heart Letter</p>
                      <p className="mb-4">The PREVENT equation — which takes kidney and metabolic health into account — estimates a person's risk of heart disease over the next 30 years.</p>
                      
                      <div className="flex items-start space-x-4 mb-4">
                        <div className="flex-1">
                          <p className="mb-3">In January, the American Heart Association (AHA) released a new online calculator to predict a person's odds of developing heart disease.</p>
                          <p className="mb-3">Compared to previous calculators, the updated tool considers broader measures of health and a longer horizon of risk. The goal? To encourage earlier, more targeted strategies to help people avoid cardiovascular problems.</p>
                          <p>The PREVENT equation (its name is based on the phrase "predicting risk of cardiovascular disease events") was designed to capture an accurate picture of the American population.</p>
                        </div>
                        <div className="flex-shrink-0 w-1/3">
                          <div className="bg-blue-100 rounded-md p-3 relative overflow-hidden">
                            <div className="absolute inset-0 bg-gradient-to-br from-blue-50/80 to-transparent"></div>
                            <div className="relative z-10 flex flex-col items-center">
                              <Heart className="h-16 w-16 text-red-500 mb-2" />
                              <div className="text-xs text-center text-gray-700 font-medium">Heart Disease Risk</div>
                              <div className="text-xs text-center text-gray-700 font-medium">Prediction Model</div>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex justify-end">
                        <a 
                          href="https://www.health.harvard.edu/heart-health/a-new-tool-to-predict-heart-disease-risk" 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="flex items-center text-primary hover:underline font-medium"
                        >
                          Read full article 
                          <ExternalLink className="ml-1 h-4 w-4" />
                        </a>
                      </div>
                    </div>
                    
                    {/* Platform advancements article */}
                    <div className="p-4 border rounded-lg bg-gradient-to-r from-blue-50 to-indigo-50">
                      <h3 className="text-xl font-bold mb-2">Our Health Platform: Recent Advancements</h3>
                      <p className="text-sm text-muted-foreground mb-1">May 11, 2025 | Technical Updates</p>
                      <p className="mb-4">We've made significant improvements to our telehealth platform to enhance doctor-patient communication and heart disease prediction accuracy.</p>
                      
                      <div className="grid md:grid-cols-2 gap-4">
                        <div className="bg-white p-4 rounded-lg shadow-sm">
                          <h4 className="font-semibold mb-3 flex items-center text-blue-700">
                            <Activity className="h-5 w-5 mr-2" /> 
                            Improved Disease Prediction
                          </h4>
                          <p className="text-sm text-gray-700 mb-2">Our platform now provides clear input guidelines with recommended value ranges for all health metrics used in disease prediction:</p>
                          <ul className="list-disc pl-5 space-y-1 text-sm text-gray-700">
                            <li>Age: 20-65 years</li>
                            <li>Blood Pressure: 90-200 mmHg</li>
                            <li>Cholesterol: 130-320 mg/dL</li>
                            <li>Heart Rate: 70-200 bpm</li>
                            <li>ST Depression: 0.0-4.0 mm</li>
                          </ul>
                        </div>
                        
                        <div className="bg-white p-4 rounded-lg shadow-sm">
                          <h4 className="font-semibold mb-3 flex items-center text-green-700">
                            <MessageSquare className="h-5 w-5 mr-2" /> 
                            Enhanced Communication
                          </h4>
                          <p className="text-sm text-gray-700 mb-2">WebSocket technology improvements ensure reliable real-time messaging between doctors and patients:</p>
                          <ul className="list-disc pl-5 space-y-1 text-sm text-gray-700">
                            <li>Robust reconnection with exponential backoff</li>
                            <li>Optimized ping-pong heartbeat mechanism</li>
                            <li>Online status tracking for all users</li>
                            <li>Secure image sharing for better diagnoses</li>
                            <li>Message status tracking (sent/delivered/read)</li>
                          </ul>
                        </div>
                      </div>
                      
                      <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                        <h4 className="font-semibold mb-2">Planned Future Enhancements</h4>
                        <div className="grid md:grid-cols-3 gap-4 text-sm">
                          <div className="flex items-start">
                            <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                            <span>Video consultation capabilities</span>
                          </div>
                          <div className="flex items-start">
                            <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                            <span>AI-powered diagnostic assistance</span>
                          </div>
                          <div className="flex items-start">
                            <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                            <span>Extended prediction models for multiple diseases</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
              </>
            )}
          </div>
        </div>
      
        {!isDoctor && (
          <>
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-6">
              <HealthDataCard
                title="Heart Rate"
                value="72"
                unit="bpm"
                status="normal"
                icon={<Heart className="h-5 w-5 text-red-500" />}
              />
              <HealthDataCard
                title="Blood Pressure"
                value="120/80"
                unit="mmHg"
                status="normal"
                icon={<Activity className="h-5 w-5 text-blue-500" />}
              />
              <HealthDataCard
                title="Cholesterol"
                value="180"
                unit="mg/dL"
                status="normal"
                icon={<Thermometer className="h-5 w-5 text-yellow-500" />}
              />
              <HealthDataCard
                title="Last Checkup"
                value="2 weeks ago"
                status="normal"
                icon={<Calendar className="h-5 w-5 text-green-500" />}
              />
            </div>

            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mb-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center text-lg font-medium">
                    <Heart className="mr-2 h-5 w-5 text-primary" />
                    Heart Rate Trend
                  </CardTitle>
                  <CardDescription>Your 7-day heart rate history</CardDescription>
                </CardHeader>
                <CardContent className="h-[240px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={heartRateData.length > 0 ? heartRateData : [
                      { date: "Mon", value: 72 },
                      { date: "Tue", value: 75 },
                      { date: "Wed", value: 71 },
                      { date: "Thu", value: 74 },
                      { date: "Fri", value: 73 },
                      { date: "Sat", value: 70 },
                      { date: "Sun", value: 72 }
                    ]}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="date" />
                      <YAxis domain={[60, 100]} />
                      <Tooltip />
                      <Line type="monotone" dataKey="value" stroke="#0ea5e9" strokeWidth={2} />
                    </LineChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center text-lg font-medium">
                    <Activity className="mr-2 h-5 w-5 text-primary" />
                    Cholesterol Levels
                  </CardTitle>
                  <CardDescription>Your cholesterol measurements</CardDescription>
                </CardHeader>
                <CardContent className="h-[240px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={cholesterolData.length > 0 ? cholesterolData : [
                      { date: "Jan", value: 190 },
                      { date: "Mar", value: 185 },
                      { date: "May", value: 182 },
                      { date: "Jul", value: 178 },
                    ]}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="date" />
                      <YAxis domain={[150, 250]} />
                      <Tooltip />
                      <Bar dataKey="value" fill="#0ea5e9" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center text-lg font-medium">
                    <AlertTriangle className="mr-2 h-5 w-5 text-primary" />
                    Disease Prediction Results
                  </CardTitle>
                  <CardDescription>
                    Heart disease prediction history
                  </CardDescription>
                </CardHeader>
                <CardContent className="flex flex-col items-center">
                  {predictions && predictions.length > 0 ? (
                    <>
                      <div className="h-[160px] w-full">
                        <ResponsiveContainer width="100%" height="100%">
                          <PieChart>
                            <Pie
                              data={predictionResults}
                              cx="50%"
                              cy="50%"
                              innerRadius={40}
                              outerRadius={80}
                              paddingAngle={5}
                              dataKey="value"
                            >
                              {predictionResults.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={entry.color} />
                              ))}
                            </Pie>
                            <Tooltip />
                          </PieChart>
                        </ResponsiveContainer>
                      </div>
                      <div className="flex justify-center space-x-6 mt-4">
                        <div className="flex items-center">
                          <div className="w-4 h-4 bg-red-500 rounded-full mr-2"></div>
                          <span className="text-sm">Positive</span>
                        </div>
                        <div className="flex items-center">
                          <div className="w-4 h-4 bg-green-500 rounded-full mr-2"></div>
                          <span className="text-sm">Negative</span>
                        </div>
                      </div>
                    </>
                  ) : (
                    <div className="flex flex-col items-center justify-center text-center h-full">
                      <AlertTriangle className="h-10 w-10 text-yellow-500 mb-3" />
                      <p className="text-muted-foreground mb-4">No prediction data available</p>
                      <Link href="/disease-predictor">
                        <Button size="sm">
                          Get a Prediction
                        </Button>
                      </Link>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
            
            {/* Recent Messages */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center text-lg font-medium">
                  <MessageSquare className="mr-2 h-5 w-5 text-primary" />
                  Recent Messages
                </CardTitle>
                <CardDescription>Your most recent conversations with doctors</CardDescription>
              </CardHeader>
              <CardContent>
                {conversations && conversations.length > 0 ? (
                  <div className="space-y-4">
                    {conversations.slice(0, 3).map((conversation: any) => (
                      <div key={conversation.id} className="flex items-center justify-between border-b pb-4">
                        <div className="flex items-center">
                          {conversation.otherUser.profilePicture ? (
                            <img
                              src={conversation.otherUser.profilePicture}
                              alt={conversation.otherUser.fullName}
                              className="h-10 w-10 rounded-full object-cover mr-3"
                            />
                          ) : (
                            <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center mr-3">
                              <span className="text-primary font-bold">
                                {conversation.otherUser.fullName.charAt(0)}
                              </span>
                            </div>
                          )}
                          <div>
                            <p className="font-medium">{conversation.otherUser.fullName}</p>
                            <p className="text-sm text-muted-foreground">
                              Last message: {new Date(conversation.lastMessageAt).toLocaleString()}
                            </p>
                          </div>
                        </div>
                        <Link href={`/chat/${conversation.id}`}>
                          <Button size="sm" variant="outline">View</Button>
                        </Link>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center text-center py-6">
                    <MessageSquare className="h-10 w-10 text-muted-foreground mb-3" />
                    <p className="text-muted-foreground mb-4">No messages yet</p>
                    <Link href="/chat">
                      <Button>
                        Start a Conversation
                      </Button>
                    </Link>
                  </div>
                )}
              </CardContent>
            </Card>
          </>
        )}
        
        {/* Doctor Dashboard */}
        {isDoctor && (
          <>
            <div className="grid gap-4 md:grid-cols-3 mb-6">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg font-medium flex items-center">
                    <MessageSquare className="mr-2 h-5 w-5 text-blue-500" />
                    Active Conversations
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">{conversations?.length || 0}</div>
                  <p className="text-sm text-muted-foreground mt-1">
                    {conversations?.length > 0 
                      ? "Ongoing patient communications" 
                      : "No active conversations"}
                  </p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg font-medium flex items-center">
                    <CheckCircle className="mr-2 h-5 w-5 text-green-500" />
                    Predictions Made
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">{predictions?.length || 0}</div>
                  <p className="text-sm text-muted-foreground mt-1">
                    Total heart disease predictions
                  </p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg font-medium flex items-center">
                    <AlertTriangle className="mr-2 h-5 w-5 text-yellow-500" />
                    High Risk Patients
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">
                    {predictions?.filter((p: any) => p.result)?.length || 0}
                  </div>
                  <p className="text-sm text-muted-foreground mt-1">
                    Patients with positive predictions
                  </p>
                </CardContent>
              </Card>
            </div>
            
            <div className="grid gap-6 md:grid-cols-2 mb-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg font-medium">
                    Recent Patients
                  </CardTitle>
                  <CardDescription>
                    Your most recent patient interactions
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {conversations && conversations.length > 0 ? (
                    <div className="space-y-4">
                      {conversations.slice(0, 5).map((conversation: any) => (
                        <div key={conversation.id} className="flex items-center justify-between border-b pb-4">
                          <div className="flex items-center">
                            {conversation.otherUser.profilePicture ? (
                              <img
                                src={conversation.otherUser.profilePicture}
                                alt={conversation.otherUser.fullName}
                                className="h-10 w-10 rounded-full object-cover mr-3"
                              />
                            ) : (
                              <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center mr-3">
                                <span className="text-primary font-bold">
                                  {conversation.otherUser.fullName.charAt(0)}
                                </span>
                              </div>
                            )}
                            <div>
                              <p className="font-medium">{conversation.otherUser.fullName}</p>
                              <p className="text-xs text-muted-foreground">
                                Last contact: {new Date(conversation.lastMessageAt).toLocaleString()}
                              </p>
                            </div>
                          </div>
                          <Link href={`/chat/${conversation.id}`}>
                            <Button size="sm" variant="outline">View</Button>
                          </Link>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="flex flex-col items-center justify-center text-center py-6">
                      <MessageSquare className="h-10 w-10 text-muted-foreground mb-3" />
                      <p className="text-muted-foreground mb-4">No patient interactions yet</p>
                    </div>
                  )}
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg font-medium">
                    Prediction Results
                  </CardTitle>
                  <CardDescription>
                    Heart disease prediction results
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {predictions && predictions.length > 0 ? (
                    <>
                      <div className="h-[200px]">
                        <ResponsiveContainer width="100%" height="100%">
                          <PieChart>
                            <Pie
                              data={predictionResults}
                              cx="50%"
                              cy="50%"
                              innerRadius={60}
                              outerRadius={80}
                              paddingAngle={5}
                              dataKey="value"
                              label
                            >
                              {predictionResults.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={entry.color} />
                              ))}
                            </Pie>
                            <Tooltip />
                          </PieChart>
                        </ResponsiveContainer>
                      </div>
                      <div className="flex justify-center space-x-6 mt-4">
                        <div className="flex items-center">
                          <div className="w-4 h-4 bg-red-500 rounded-full mr-2"></div>
                          <span className="text-sm">Positive ({predictionResults[0]?.value || 0})</span>
                        </div>
                        <div className="flex items-center">
                          <div className="w-4 h-4 bg-green-500 rounded-full mr-2"></div>
                          <span className="text-sm">Negative ({predictionResults[1]?.value || 0})</span>
                        </div>
                      </div>
                    </>
                  ) : (
                    <div className="flex flex-col items-center justify-center text-center h-[200px]">
                      <AlertTriangle className="h-10 w-10 text-yellow-500 mb-3" />
                      <p className="text-muted-foreground">No prediction data available</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </>
        )}
      </div>
    </div>
  );
}